// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager_api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseInterface is an autogenerated mock type for the UserUsecaseInterface type
type UserUsecaseInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserUsecaseInterface) CreateUser(c context.Context, user domain.User) domain.CodedError {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.CodedError); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// Promote provides a mock function with given fields: c, username
func (_m *UserUsecaseInterface) Promote(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// ValidateAndGetToken provides a mock function with given fields: c, user
func (_m *UserUsecaseInterface) ValidateAndGetToken(c context.Context, user domain.User) (string, domain.CodedError) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAndGetToken")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (string, domain.CodedError)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) domain.CodedError); ok {
		r1 = rf(c, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// NewUserUsecaseInterface creates a new instance of UserUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecaseInterface {
	mock := &UserUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
