// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager_api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// CheckDuplicate provides a mock function with given fields: c, key, value, errorMessage
func (_m *UserRepositoryInterface) CheckDuplicate(c context.Context, key string, value interface{}, errorMessage string) domain.CodedError {
	ret := _m.Called(c, key, value, errorMessage)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicate")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, string) domain.CodedError); ok {
		r0 = rf(c, key, value, errorMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserRepositoryInterface) CreateUser(c context.Context, user domain.User) domain.CodedError {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.CodedError); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// GetByUsername provides a mock function with given fields: c, username
func (_m *UserRepositoryInterface) GetByUsername(c context.Context, username string) (domain.User, domain.CodedError) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 domain.User
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, domain.CodedError)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.CodedError); ok {
		r1 = rf(c, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// PromoteUser provides a mock function with given fields: c, username
func (_m *UserRepositoryInterface) PromoteUser(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
